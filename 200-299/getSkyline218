public class GetSkyline {
    
    private final static int UP = 1;
    private final static int DOWN = 0;

    class Node{
        int start;
        int height;
        int status;
        Node(int start,int height,int status){
            this.start = start;
            this.height = height;
            this.status = status;
        }
    }

    public List<List<Integer>> getSkyline(int[][] buildings) {
        List<List<Integer>> lists = new ArrayList<>();
        PriorityQueue<Node> priorityQueue = new PriorityQueue<>((o1, o2) -> {
            if (o1.start != o2.start){
                return o1.start - o2.start;
            }
            if (o2.status == o1.status){
                if (o2.status == 1){
                    return o2.height - o1.height;
                }else {
                    return o1.height - o2.height;
                }
            }else {
                if (o2.status == 0){
                    return -1;
                }else if (o1.status == 0){
                    return 1;
                }else {
                    return o2.height - o1.height;
                }
            }
        });
        TreeMap<Integer,Integer> treeMap = new TreeMap<>();
        for (int[] building : buildings) {
            priorityQueue.add(new Node(building[0], building[2], UP));
            priorityQueue.add(new Node(building[1], building[2], DOWN));
        }
        int max = 0;
        while (!priorityQueue.isEmpty()){
            Node node = priorityQueue.poll();
            int index = node.start;
            Integer n = treeMap.get(node.height);
            if (node.status == DOWN){
                if (n == 1){
                    treeMap.remove(node.height);
                }else {
                    treeMap.put(node.height,n - 1);
                }
            }else {
                // node.status == UP
                if (n == null){
                    treeMap.put(node.height,1);
                }else {
                    treeMap.put(node.height,n + 1);
                }
            }
            List<Integer> list1 = new ArrayList<>();
            if (treeMap.lastEntry() == null){
                list1.add(index);
                list1.add(0);
                max = 0;
                lists.add(list1);
                continue;
            }
            Integer curMax = treeMap.lastEntry().getKey();
            if (curMax != max){
                list1.add(index);
                list1.add(curMax);
                max = curMax;
                lists.add(list1);
            }
        }
        return lists;
    }
}
