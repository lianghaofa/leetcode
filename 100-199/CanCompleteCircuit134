public class CanCompleteCircuit {

    public static void main(String[] args) {
        canCompleteCircuit(new int[]{2, 3, 4}, new int[]{3, 4, 3});
    }

    public static int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        int surplus = 0;
        int ans = 0;
        int totalSurplus = 0;
        // the most difficult
        for(int i = 0; i < n; i++){
            totalSurplus += gas[i] - cost[i];
            surplus += gas[i] - cost[i];
            if(surplus < 0){
                surplus = 0;
                ans = i + 1;
            }
        }
        // total_surplus < 0 must not work.
        return (totalSurplus >= 0) ? ans : -1;
    }


    //
    public static int canCompleteCircuit0(int[] gas, int[] cost) {
        int n = gas.length;
        int surplus = 0;
        int ans = 0;
        int totalSurplus = 0;
        // the most difficult
        int preSum = 0;
        for(int i = 0; i < n; i++){
            totalSurplus += gas[i] - cost[i];
            surplus += gas[i] - cost[i];
            if(surplus < 0){
                surplus = 0;
                preSum = totalSurplus;
                ans = i + 1;
            }
        }
        // total_surplus < 0 must not work.
        return (surplus + preSum >= 0) ? ans : -1;
    }

    public static int canCompleteCircuit1(int[] gas, int[] cost) {
        int n = gas.length;
        int surplus = 0;
        int ans = 0;
        int totalSurplus = 0;
        // the most difficult
        int preSum = 0;
        for(int i = 0; i < n; i++){
            totalSurplus += gas[i] - cost[i];
            surplus += gas[i] - cost[i];
            if(surplus < 0){
                surplus = 0;
                preSum = totalSurplus;
                ans = i + 1;
            }
        }
        // total_surplus < 0 must not work.
        return (surplus + preSum >= 0) ? ans : -1;
    }



}
