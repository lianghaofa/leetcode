public class MaximalRectangle {
    static class Node{
        int index;
        int height;
        Node(int height,int index){
            this.index = index;
            this.height = height;
        }
    }

    public static void main(String[] args) {
        char[][] matrix =  new char[5][];
        char[] nums0 = new char[]{'0','1','1','0','1'};
        char[] nums1 = new char[]{'1','1','0','1','0'};
        char[] nums2 = new char[]{'0','1','1','1','0'};
        char[] nums3 = new char[]{'1','1','1','1','0'};
        char[] nums4 = new char[]{'1','1','1','1','1'};
        //char[] nums5 = new char[]{'0','0','0','0','0'};
        matrix[0] = nums0;
        matrix[1] = nums1;
        matrix[2] = nums2;
        matrix[3] = nums3;
        //matrix[4] = nums4;
        //matrix[5] = nums5;
        System.out.println(maximalRectangle(matrix));

    }

    public static int maximalRectangle(char[][] matrix) {
        if (matrix.length < 1){
            return 0;
        }
        int res = 0;
        Deque<Node> stack = new LinkedList<>();
        int[] temp = new int[matrix[0].length];
        for (int i = 0;i < matrix[0].length; i ++){
            temp[i] = matrix[0][i] - '0';
            res = Math.max(res,keepStack(stack,new Node(temp[i],i)));
        }
        res = Math.max(res,clearStack(stack,matrix[0].length));
        for (int i = 1; i < matrix.length; i ++){
            for (int j = 0;j < matrix[i].length; j ++){
                if (matrix[i][j] - '0' > 0){
                    temp[j] += matrix[i][j] - '0';
                }else {
                    temp[j] = 0;
                }
                int s = keepStack(stack,new Node(temp[j],j));
                res = Math.max(res,s);
            }
            int c = clearStack(stack,matrix[i].length);
            res = Math.max(res,c);
        }
        return res;
    }

    private static int keepStack(Deque<Node> stack,Node node){
        if (stack.isEmpty()){
            stack.push(node);
            return 0;
        }
        Node top = stack.peek();
        // keep increment
        int max = 0;
        while (!stack.isEmpty() && node.height <= top.height){
            stack.pop();
            // 结算
            int i = -1;
            Node top1 = null;
            if (!stack.isEmpty()){
                top1 = stack.peek();
                i = top1.index;
            }
            max = Math.max(max,top.height * (node.index - i - 1));
            top = top1;
        }
        stack.push(node);
        return max;
    }

    private static int clearStack(Deque<Node> stack,int length){
        if (stack.isEmpty()){
            return 0;
        }
        Node top = stack.peek();
        // keep increment
        int max = 0;
        while (top != null){
            stack.pop();
            // 结算
            int i = -1;
            Node top1 = null;
            if (!stack.isEmpty()){
                top1 = stack.peek();
                i = top1.index;
            }
            int area = top.height * (length - i - 1);
            max = Math.max(max,area);
            top = top1;
        }
        return max;
    }
    
}
